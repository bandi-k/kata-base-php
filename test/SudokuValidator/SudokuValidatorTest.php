<?php

namespace Kata\Test\SudokuValidator;

use Kata\SudokuValidator\SudokuValidator;
use PHPUnit_Framework_TestCase;

class SudokuValidatorTest extends PHPUnit_Framework_TestCase
{
	/** @var SudokuValidator */
	private $subject;

	public function setUp()
	{
		$this->subject = new SudokuValidator();
	}

	public function testValidSolution()
	{
		$this->assertTrue($this->subject->validateSolution([
			[5, 3, 4, 6, 7, 8, 9, 1, 2],
			[6, 7, 2, 1, 9, 5, 3, 4, 8],
			[1, 9, 8, 3, 4, 2, 5, 6, 7],
			[8, 5, 9, 7, 6, 1, 4, 2, 3],
			[4, 2, 6, 8, 5, 3, 7, 9, 1],
			[7, 1, 3, 9, 2, 4, 8, 5, 6],
			[9, 6, 1, 5, 3, 7, 2, 8, 4],
			[2, 8, 7, 4, 1, 9, 6, 3, 5],
			[3, 4, 5, 2, 8, 6, 1, 7, 9]
		]));
	}

	public function testInvalidSolution()
	{
		$this->assertFalse($this->subject->validateSolution([
			[5, 3, 4, 6, 7, 8, 9, 1, 2],
			[6, 7, 2, 1, 9, 0, 3, 4, 8],
			[1, 0, 0, 3, 4, 2, 5, 6, 0],
			[8, 5, 9, 7, 6, 1, 0, 2, 0],
			[4, 2, 6, 8, 5, 3, 7, 9, 1],
			[7, 1, 3, 9, 2, 4, 8, 5, 6],
			[9, 0, 1, 5, 3, 7, 2, 1, 4],
			[2, 8, 7, 4, 1, 9, 6, 3, 5],
			[3, 0, 0, 4, 8, 1, 1, 7, 9]
		]));

		$this->assertFalse($this->subject->validateSolution([
			[5, 5, 4, 6, 7, 8, 9, 1, 2],
			[6, 7, 2, 1, 9, 5, 3, 4, 8],
			[1, 9, 8, 3, 4, 2, 5, 6, 7],
			[8, 5, 9, 7, 6, 1, 4, 2, 3],
			[4, 2, 6, 8, 5, 3, 7, 9, 1],
			[7, 1, 3, 9, 2, 4, 8, 5, 6],
			[9, 6, 1, 5, 3, 7, 2, 8, 4],
			[2, 8, 7, 4, 1, 9, 6, 3, 5],
			[3, 4, 5, 2, 8, 6, 1, 7, 9]
		]));

		$this->assertFalse($this->subject->validateSolution([
			[5, 3, 4, 6, 7, 8, 9, 1, 2],
			[6, 5, 2, 1, 9, 5, 3, 4, 8],
			[1, 9, 8, 3, 4, 2, 5, 6, 7],
			[8, 5, 9, 7, 6, 1, 4, 2, 3],
			[4, 2, 6, 8, 5, 3, 7, 9, 1],
			[7, 1, 3, 9, 2, 4, 8, 5, 6],
			[9, 6, 1, 5, 3, 7, 2, 8, 4],
			[2, 8, 7, 4, 1, 9, 6, 3, 5],
			[3, 4, 5, 2, 8, 6, 1, 7, 9]
		]));

		$this->assertFalse($this->subject->validateSolution([
			[5, 3, 4, 6, 7, 8, 9, 1, 2],
			[5, 7, 2, 1, 9, 5, 3, 4, 8],
			[1, 9, 8, 3, 4, 2, 5, 6, 7],
			[8, 5, 9, 7, 6, 1, 4, 2, 3],
			[4, 2, 6, 8, 5, 3, 7, 9, 1],
			[7, 1, 3, 9, 2, 4, 8, 5, 6],
			[9, 6, 1, 5, 3, 7, 2, 8, 4],
			[2, 8, 7, 4, 1, 9, 6, 3, 5],
			[3, 4, 5, 2, 8, 6, 1, 7, 9]
		]));

		$this->assertFalse($this->subject->validateSolution([
			[1, 2, 3, 4, 5, 6, 7, 8, 9],
			[1, 2, 3, 4, 5, 6, 7, 8, 9],
			[1, 2, 3, 4, 5, 6, 7, 8, 9],
			[1, 2, 3, 4, 5, 6, 7, 8, 9],
			[1, 2, 3, 4, 5, 6, 7, 8, 9],
			[1, 2, 3, 4, 5, 6, 7, 8, 9],
			[1, 2, 3, 4, 5, 6, 7, 8, 9],
			[1, 2, 3, 4, 5, 6, 7, 8, 9],
			[1, 2, 3, 4, 5, 6, 7, 8, 9],
		]));

		$this->assertFalse($this->subject->validateSolution([
			[1,2,3, 4,5,6, 7,8,9],
			[2,3,4, 5,6,7, 8,9,1],
			[3,4,5, 6,7,8, 9,1,2],

			[4,5,6, 7,8,9, 1,2,3],
			[5,6,7, 8,9,1, 2,3,4],
			[6,7,8, 9,1,2, 3,4,5],

			[7,8,9, 1,2,3, 4,5,6],
			[8,9,1, 2,3,4, 5,6,7],
			[9,1,2, 3,4,5, 6,7,8],
		]));
	}
}